import os
import time
import json
import base64
import requests
import pyautogui
import threading
import tkinter as tk
from tkinter import scrolledtext, messagebox, ttk
import tempfile
from PIL import Image, ImageTk

# =================================================================
# GIAO DI·ªÜN V√Ä LOGIC T√çCH H·ª¢M
# =================================================================

class AIportGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("AI Agent Control")
        self.root.geometry("600x650")
        self.root.configure(bg="#2c2c2c") 

        self.api_key = tk.StringVar()
        self.api_provider = tk.StringVar(value="Gemini")
        self.model = tk.StringVar()
        self.stop_flag = False
        self.agent_thread = None
        self.last_screenshot_path = None

        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TFrame", background="#2c2c2c")
        style.configure("TLabel", background="#2c2c2c", foreground="#e0e0e0")
        style.configure("TButton", background="#555555", foreground="#ffffff", font=("Helvetica", 10, "bold"), borderwidth=0, focusthickness=3, focuscolor='none')
        style.map("TButton", background=[('active', '#777777')])
        style.configure("TEntry", background="#444444", foreground="#e0e0e0", borderwidth=0)
        style.configure("TScrolledtext", background="#444444", foreground="#e0e0e0", borderwidth=0)
        style.configure("TCombobox", background="#444444", foreground="#e0e0e0")
        
        main_frame = ttk.Frame(root, padding=15)
        main_frame.pack(fill="both", expand=True)

        # 1. Ch·ªçn API
        ttk.Label(main_frame, text="Ch·ªçn API:").grid(row=0, column=0, sticky="w", pady=(0, 5))
        self.api_provider_combobox = ttk.Combobox(main_frame, textvariable=self.api_provider, state="readonly")
        self.api_provider_combobox["values"] = ("Gemini", "OpenRouter")
        self.api_provider_combobox.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, 15))
        self.api_provider_combobox.bind("<<ComboboxSelected>>", self._on_api_change)

        # 2. API Key
        ttk.Label(main_frame, text="API Key:").grid(row=2, column=0, sticky="w", pady=(0, 5))
        self.api_key_entry = ttk.Entry(main_frame, textvariable=self.api_key, width=70, show="*")
        self.api_key_entry.grid(row=3, column=0, columnspan=2, sticky="ew", pady=(0, 15))

        # 3. Ch·ªçn m√¥ h√¨nh
        ttk.Label(main_frame, text="Ch·ªçn M√¥ h√¨nh AI:").grid(row=4, column=0, sticky="w", pady=(0, 5))
        self.model_combobox = ttk.Combobox(main_frame, textvariable=self.model, state="readonly")
        self.model_combobox["values"] = ("gemini-2.5-flash", "gemini-2.0-flash", "gemini-1.5-flash", "gemini-1.5-pro", "gemini-1.0-pro")
        self.model_combobox.current(0)
        self.model_combobox.grid(row=5, column=0, columnspan=2, sticky="ew", pady=(0, 15))

        # 4. L·ªánh cho AI
        ttk.Label(main_frame, text="Nh·∫≠p l·ªánh cho AI:").grid(row=6, column=0, sticky="w", pady=(0, 5))
        self.prompt_text = scrolledtext.ScrolledText(main_frame, height=8, wrap=tk.WORD, font=("Helvetica", 10))
        self.prompt_text.grid(row=7, column=0, columnspan=2, sticky="ew", pady=(0, 15))
        self.prompt_text.insert(tk.END, "T√¨m tr√¨nh duy·ªát Chrome v√† m·ªü trang google.com")

        # 5. N√∫t ƒëi·ªÅu khi·ªÉn
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=8, column=0, columnspan=2, pady=(0, 15))
        
        self.start_button = ttk.Button(button_frame, text="‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu", command=self.start_agent)
        self.start_button.pack(side="left", padx=10)

        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è D·ª´ng", command=self.stop_agent, state="disabled")
        self.stop_button.pack(side="left", padx=10)

        self.view_image_button = ttk.Button(button_frame, text="üñºÔ∏è Xem ·∫¢nh Ch·ª•p", command=self.view_last_screenshot)
        self.view_image_button.pack(side="left", padx=10)

        # 6. Log/Output
        ttk.Label(main_frame, text="Log ho·∫°t ƒë·ªông c·ªßa AI:").grid(row=9, column=0, sticky="w", pady=(0, 5))
        self.log_area = scrolledtext.ScrolledText(main_frame, height=15, wrap=tk.WORD, state="disabled", bg="#f0f0f0")
        self.log_area.grid(row=10, column=0, columnspan=2, sticky="nsew")

        main_frame.grid_rowconfigure(10, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)

    def _on_api_change(self, event=None):
        api_provider = self.api_provider.get()
        if api_provider == "OpenRouter":
            self.model_combobox["values"] = (
                "openrouter/cinematika-7b",
                "google/gemini-flash-1.5-preview", 
                "mistralai/mixtral-8x7b-instruct",
                "nousresearch/nous-hermes-2-mixtral-8x7b-dpo"
            )
            self.model.set("openrouter/cinematika-7b")
        elif api_provider == "Gemini":
            self.model_combobox["values"] = (
                "gemini-2.5-flash",
                "gemini-2.0-flash",
                "gemini-1.5-flash",
                "gemini-1.5-pro",
                "gemini-1.0-pro"
            )
            self.model.set("gemini-2.5-flash")

    def log(self, message):
        self.log_area.configure(state="normal")
        self.log_area.insert(tk.END, message + "\n")
        self.log_area.configure(state="disabled")
        self.log_area.see(tk.END)
        self.root.update_idletasks()

    def start_agent(self):
        if not self.api_key.get():
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p API Key!")
            return
        if not self.prompt_text.get("1.0", tk.END).strip():
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p l·ªánh cho AI!")
            return

        self.stop_flag = False
        self.start_button.config(state="disabled")
        self.stop_button.config(state="normal")
        self.log_area.configure(state="normal")
        self.log_area.delete("1.0", tk.END)
        self.log_area.configure(state="disabled")

        self.agent_thread = threading.Thread(target=self._run_agent_loop, daemon=True)
        self.agent_thread.start()

    def stop_agent(self):
        self.stop_flag = True
        self.log("‚èπÔ∏è ƒêang g·ª≠i t√≠n hi·ªáu d·ª´ng t·ªõi AI...")
        self.start_button.config(state="normal")
        self.stop_button.config(state="disabled")

    def _encode_image(self, filename):
        with open(filename, "rb") as f:
            return base64.b64encode(f.read()).decode("utf-8")

    def _send_to_gemini(self, img_b64, user_prompt):
        api_key = self.api_key.get()
        model = self.model.get()
        url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={api_key}"
        headers = {"Content-Type": "application/json"}
        tutorial = """
        B·∫°n l√† AI ƒëi·ªÅu khi·ªÉn m√°y t√≠nh qua JSON. Lu√¥n lu√¥n tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng gi·∫£i th√≠ch th√™m.
        C√°c action h·ª£p l·ªá:
        - move: { "type":"move","x":int,"y":int }
        - click: { "type":"click","button":"left/right","count":1 }
        - click_down: { "type":"click_down","button":"left/right" }
        - click_up: { "type":"click_up","button":"left/right" }
        - scroll: { "type":"scroll","dx":0,"dy":int }
        - type: { "type":"type","text":"abc" }
        - hotkey: { "type":"hotkey","keys":["ctrl","c"] }
        - multi_click: { "type":"multi_click","x":int,"y":int,"count":int }
        - key_down_for_seconds: { "type":"key_down_for_seconds","key":"key_name","duration":float }
        Lu√¥n tr·∫£ v·ªÅ m·∫£ng JSON [] ch·ªâ ch·ª©a l·ªánh.
        V√≠ d·ª•:
        [{"type":"move","x":500,"y":300},{"type":"click","button":"left","count":2}]
        """
        payload = {"contents": [{"parts": [{"text": tutorial}, {"inline_data": {"mime_type": "image/png", "data": img_b64}}, {"text": user_prompt}]}]}
        res = requests.post(url, headers=headers, data=json.dumps(payload))
        res.raise_for_status()
        return res.json()["candidates"][0]["content"]["parts"][0]["text"]

    def _send_to_openrouter(self, img_b64, user_prompt):
        api_key = self.api_key.get()
        model = self.model.get()
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        tutorial = """
        B·∫°n l√† AI ƒëi·ªÅu khi·ªÉn m√°y t√≠nh qua JSON. Lu√¥n lu√¥n tr·∫£ v·ªÅ JSON h·ª£p l·ªá, kh√¥ng gi·∫£i th√≠ch th√™m.
        C√°c action h·ª£p l·ªá:
        - move: { "type":"move","x":int,"y":int }
        - click: { "type":"click","button":"left/right","count":1 }
        - click_down: { "type":"click_down","button":"left/right" }
        - click_up: { "type":"click_up","button":"left/right" }
        - scroll: { "type":"scroll","dx":0,"dy":int }
        - type: { "type":"type","text":"abc" }
        - hotkey: { "type":"hotkey","keys":["ctrl","c"] }
        - multi_click: { "type":"multi_click","x":int,"y":int,"count":int }
        - key_down_for_seconds: { "type":"key_down_for_seconds","key":"key_name","duration":float }
        Lu√¥n tr·∫£ v·ªÅ m·∫£ng JSON [] ch·ªâ ch·ª©a l·ªánh.
        V√≠ d·ª•:
        [{"type":"move","x":500,"y":300},{"type":"click","button":"left","count":2}]
        """
        payload = {
            "model": model,
            "messages": [
                {"role": "user", "content": [
                    {"type": "text", "text": tutorial + "\n\n" + user_prompt},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}}
                ]}
            ]
        }
        res = requests.post(url, headers=headers, data=json.dumps(payload))
        res.raise_for_status()
        return res.json()["choices"][0]["message"]["content"]

    def _execute_actions(self, actions):
        for action in actions:
            t = action.get("type")
            self.log(f"   - Th·ª±c thi: {t} v·ªõi {action}")
            if t == "move":
                pyautogui.moveTo(action["x"], action["y"], duration=0.5)
            elif t == "click":
                pyautogui.click(button=action.get("button", "left"), clicks=action.get("count", 1))
            elif t == "click_down":
                pyautogui.mouseDown(button=action.get("button", "left"))
            elif t == "click_up":
                pyautogui.mouseUp(button=action.get("button", "left"))
            elif t == "scroll":
                pyautogui.scroll(action.get("dy", 0))
            elif t == "type":
                pyautogui.typewrite(action["text"], interval=0.05)
            elif t == "hotkey":
                pyautogui.hotkey(*action["keys"])
            elif t == "multi_click":
                for _ in range(action.get("count", 2)):
                    pyautogui.click(action["x"], action["y"])
                    time.sleep(0.05)
            elif t == "key_down_for_seconds":
                key = action.get("key")
                duration = action.get("duration", 1.0)
                if key:
                    pyautogui.keyDown(key)
                    self.log(f"   - Gi·ªØ ph√≠m: {key} trong {duration} gi√¢y")
                    time.sleep(duration)
                    pyautogui.keyUp(key)
            time.sleep(0.5)

    def view_last_screenshot(self):
        if not self.last_screenshot_path or not os.path.exists(self.last_screenshot_path):
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ ·∫£nh ch·ª•p m√†n h√¨nh n√†o.")
            return

        view_window = tk.Toplevel(self.root)
        view_window.title("·∫¢nh Ch·ª•p M√†n H√¨nh")
        
        img = Image.open(self.last_screenshot_path)
        max_size = (800, 600)
        img.thumbnail(max_size)
        
        tk_img = ImageTk.PhotoImage(img)
        
        label = ttk.Label(view_window, image=tk_img)
        label.image = tk_img
        label.pack()

        close_button = ttk.Button(view_window, text="ƒê√≥ng", command=view_window.destroy)
        close_button.pack(pady=10)

    def _run_agent_loop(self):
        self.log("‚ñ∂Ô∏è AI b·∫Øt ƒë·∫ßu ƒëi·ªÅu khi·ªÉn...")
        user_prompt = self.prompt_text.get("1.0", tk.END).strip()

        temp_dir = tempfile.gettempdir()
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)

        while not self.stop_flag:
            self._cleanup_temp_files()
            try:
                self.last_screenshot_path = os.path.join(temp_dir, f"screenshot_{int(time.time())}.png")

                self.log(f"\n[1] Ch·ª•p ·∫£nh m√†n h√¨nh m·ªõi: {self.last_screenshot_path}")
                pyautogui.screenshot(self.last_screenshot_path)
                
                img_b64 = self._encode_image(self.last_screenshot_path)

                self.log("[2] G·ª≠i ·∫£nh v√† l·ªánh t·ªõi AI...")

                api_provider = self.api_provider.get()
                if api_provider == "Gemini":
                    response_text = self._send_to_gemini(img_b64, user_prompt)
                elif api_provider == "OpenRouter":
                    response_text = self._send_to_openrouter(img_b64, user_prompt)
                else:
                    self.log("‚ùå L·ªói: API Provider kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.")
                    break
                
                self.log("[3] AI ph·∫£n h·ªìi:\n" + response_text)

                try:
                    clean_ai_text = response_text.strip().replace("```json", "").replace("```", "")
                    actions = json.loads(clean_ai_text)
                    
                    if not actions:
                        self.log("‚úÖ AI cho r·∫±ng ƒë√£ ho√†n th√†nh nhi·ªám v·ª•. D·ª´ng l·∫°i.")
                        break

                    self.log("[4] Th·ª±c thi c√°c h√†nh ƒë·ªông:")
                    self._execute_actions(actions)
                except Exception as e:
                    self.log(f"‚ùå L·ªói khi ph√¢n t√≠ch JSON ho·∫∑c th·ª±c thi: {e}")

                time.sleep(2)

            except Exception as e:
                self.log(f"‚ùå L·ªói trong v√≤ng l·∫∑p ch√≠nh: {e}")
                if "API_KEY_INVALID" in str(e) or "AuthenticationError" in str(e):
                    self.log("L·ªñI: API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.")
                elif "404" in str(e):
                    self.log("L·ªñI: ƒê∆∞·ªùng d·∫´n API kh√¥ng t√¨m th·∫•y. C√≥ th·ªÉ do b·∫°n ƒë√£ ch·ªçn m·ªôt m√¥ h√¨nh kh√¥ng h·ªó tr·ª£ ·∫£nh ch·ª•p m√†n h√¨nh.")
                    self.log("Vui l√≤ng th·ª≠ l·∫°i v·ªõi m·ªôt m√¥ h√¨nh kh√°c, v√≠ d·ª• nh∆∞ 'openrouter/cinematika-7b'.")
                break
                time.sleep(2)
        
        if self.stop_flag:
             self.log("‚èπÔ∏è AI ƒë√£ d·ª´ng b·ªüi ng∆∞·ªùi d√πng.")
        self.stop_agent()
        self._cleanup_temp_files()

    def _cleanup_temp_files(self):
        temp_dir = tempfile.gettempdir()
        for filename in os.listdir(temp_dir):
            if filename.startswith("screenshot_") and filename.endswith(".png"):
                file_path = os.path.join(temp_dir, filename)
                try:
                    os.remove(file_path)
                except OSError as e:
                    self.log(f"L·ªói khi x√≥a file t·∫°m {file_path}: {e}")

# ================== RUN ==================
if __name__ == "__main__":
    root = tk.Tk()
    app = AIportGUI(root)
    root.mainloop()
